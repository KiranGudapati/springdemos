package com.user.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


import com.user.model.User;
import com.user.repository.UserRepository;
import com.user.service.UserService;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.ApiResponse;

@RestController
@CrossOrigin
@RequestMapping("api/")
public class UserController {
	
	@Autowired
	private UserRepository userRepository;
	
	@Autowired(required = true)
    UserService userService;
	
	 @Autowired
	    public UserController(UserService userService) {
	        this.userService = userService;
	    }


	
	@GetMapping("users")
	public ResponseEntity<List> getUsers() {
		//List<User> users = this.userRepository.findAll();
		//System.out.println("in findAll"+users.toString());
		return new ResponseEntity<List>((List) userService.getUsers(), HttpStatus.OK);
		//return userService.sortUsersByName(users);
	}

	
	@ApiOperation(value = "Find user by ID", notes = "Returns a single user", tags = { "user" })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response=User.class),
        @ApiResponse(code = 404, message = "User not found") })
	@GetMapping("/user/{id}")
	public ResponseEntity getUserById( @ApiParam(value = "Id of the user to be obtained. Cannot be empty.",required = true) @PathVariable(value = "id") Long id) throws Exception {
		//return ResponseEntity.ok().body(user);
		return new ResponseEntity(userService.getUserById(id), HttpStatus.OK);
	}
	
	@PostMapping("/getUserByEmailAndPassword")
	public ResponseEntity<List> getUserByEmailAndPassword(@RequestBody User user) {
		User userRes = this.userRepository.findByEmailAndPassword(user.getEmail(), user.getPassword());
		System.out.println(userRes.toString());
		List<User> users = new ArrayList<User>();
		users.add(userRes);
		return new ResponseEntity<List>(users, HttpStatus.OK);
		//return users;
		//return ResponseEntity.ok().body(userRes);
	}

/*	@PostMapping("/users")
	public User createuser(@Validated @RequestBody User user) {
		return userRepository.save(user);
	}

	@PutMapping("/users/{id}")
	public ResponseEntity<User> updateuser(@PathVariable(value = "id") Long userId,
			@Validated @RequestBody User userDetails) throws Exception {
		User user = userRepository.findById(userId)
				.orElseThrow(() -> new Exception("User not found for this id :: " + userId));

		user.setEmail(userDetails.getEmail());
		user.setName(userDetails.getName());
		user.setPassword(userDetails.getPassword());
		user.setRole(userDetails.getRole());
		final User updateduser = userRepository.save(user);
		return ResponseEntity.ok(updateduser);
	}

	@DeleteMapping("/users/{id}")
	public Map<String, Boolean> deleteUser(@PathVariable(value = "id") Long userId) throws Exception {
		User user = userRepository.findById(userId)
				.orElseThrow(() -> new Exception("user not found for this id :: " + userId));

		userRepository.delete(user);
		Map<String, Boolean> response = new HashMap<>();
		response.put("deleted", Boolean.TRUE);
		return response;
	}

	@PatchMapping("/users/{id}/{firstName}")
	public ResponseEntity<User> updateUserPartially(@PathVariable Long id, @PathVariable String firstName) {
		try {
			User user = this.userRepository.findById(id).get();
			user.setName(firstName);
			return new ResponseEntity<User>(this.userRepository.save(user), HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}*/

}